<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.text.Font?>

<ScrollPane maxHeight="400.0" maxWidth="600.0" minHeight="400.0" minWidth="600.0" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/18" xmlns:fx="http://javafx.com/fxml/1">
   <content>
      <TextArea prefHeight="400.0" prefWidth="600.0" text="Basic usage&#10;When the program start running, the window will pop out the first scene &#10;Click Start Sorting, the sorting window will appear with the center of sorting algorithm and &#10;the surrounding which are five functional buttons,: “Create Array”, “Help Menu”, &#10;“Step forward”,  “Step backward”, “Sort” and group of checkbox : “Heap sort”, &#10;“Bubble sort”, “Shell sort”.&#10; &#10;Create Array : &#10;The function help user can choose two options : create array randomly or create array with &#10;input. &#10;When user choose the first one, an array is randomly created. &#10;When user choose the second one, user must enter the size of array and the data of all &#10;elements in array.&#10;Help Menu: Set of basic instructions and aims of program&#10;Step forward: Click here to see the previous state of an array&#10;Step backward: Click here to the next state of an array&#10;&#10;Sort: Click to sort the array&#10;Group of checkbox: There are three options user can choose only one : &#10;Heap sort, Bubble sort, Shell sort. When user click one of them, user agree to sort the array &#10;with this algorithm which are shown in the center of window scene.&#10;&#10;Aim application:&#10;Sorting is a very classical problem of reordering items (that can be compared, e.g, integers,&#10;floating point numbers, string, etc) of an array  (or a list) in a certain order (increasing, &#10;non-decreasing, decreasing, non-decreasing, lexicographical, etc). Therefore, sorting is &#10;commonly used as the introductory problem in various Computer Science classes to &#10;showcase a range of algorithm ideas.&#10;This application will help user understanding three essential sorting algorithms: Bubble &#10;sort, Heap sort and Shell sort via demonstration step by step how the sorting algorithm &#10;works. &#10;Bubble sort is based on the idea of repeatedly comparing pairs of adjacent elements and &#10;then swapping their positions if they exist in the wrong order. The algorithm will stop if it &#10;can run through the array and find no two elements that need to be swapped.&#10;Heap sort is visualized of binary tree (heap) which the node has two children. The concept &#10;of heap sort if to eliminate the  elements one by one from the heap part of the list, and then &#10;insert them into the sorted part of the list. Heap sort basically recursively performs two &#10;main operations: build a heap H, using the elements of array and repeatedly delete the root&#10;element of the heap formed in first phase.&#10;Shell sort is a generalized version of the insertion sort algorithm. It first sorts elements that &#10;are far apart from each other and successively reduces the interval between the elements &#10;to be sorted. The interval between the elements is reduced based on the sequence used.&#10;" wrapText="true">
         <font>
            <Font size="15.0" />
         </font>
      </TextArea>
   </content>
</ScrollPane>
